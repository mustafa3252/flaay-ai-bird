import { AxiosInstance } from 'axios';
import * as React_2 from 'react';

export declare interface BedrockPassportIdInterface {
    user?: User;
    isLoggedIn: boolean;
    signIn: (provider: UserProvider, credentials?: EmailCredentials) => Promise<UserLoginDto | undefined>;
    loginCallback: (accessToken: string, refreshToken: string) => Promise<boolean>;
    signOut: () => void;
    accessToken?: string;
    getNonce: () => Promise<NonceDto | undefined>;
    verifyNonce: (message: unknown, signature: string) => Promise<UserLoginDto | undefined>;
    linkWallet: (message: unknown, signature: string) => Promise<UserLoginDto | undefined>;
    linkSocial: (provider: UserProvider) => void;
    errorWallet?: string;
    setErrorWallet: (data: string) => void;
    widgetText?: string;
    widgetUrl?: string;
    linkProfile: () => void;
    registerEmail: (email: string, password: string, passwordConfirm: string) => Promise<UserLoginDto | undefined>;
    getTokenReset: (email: string) => Promise<{
        code: number;
        status: string;
    }>;
    changePassword: (password: string, passwordConfirm: string, token: string) => void;
    getCurrency: () => Promise<ItemsList | undefined>;
    getItems: () => Promise<ItemsList | undefined>;
    currency?: ItemsList;
    apiClient: AxiosInstance;
}

export declare const BedrockPassportProvider: React.FC<Props>;

declare interface EmailCredentials {
    email: string;
    password: string;
}

declare type FeatureConfig = Partial<FeatureFlags>;

declare interface FeatureFlags {
    enableWalletConnect: boolean;
    enableEmailLogin: boolean;
    enableGoogleLogin: boolean;
    enableAppleLogin: boolean;
    enableItemsDisplay: boolean;
    enableCurrencyDisplay: boolean;
    showProfileButton: boolean;
    showLogoutButton: boolean;
}

declare type Items = {
    Id: string;
    StackId: string;
    DisplayProperties: any;
    Amount: any;
    Type: string;
};

declare type ItemsList = {
    Items: Items[];
};

export declare const LoginPanel: React_2.FC<LoginProps>;

declare interface LoginProps {
    panelClass?: string;
    headerClass?: string;
    buttonClass?: string;
    title?: string;
    titleClass?: string;
    logo?: string;
    logoClass?: string;
    logoAlt?: string;
    showConnectWallet?: boolean;
    walletButtonClass?: string;
    walletButtonText?: string;
    separatorClass?: string;
    separatorText?: string;
    separatorTextClass?: string;
    features?: FeatureConfig;
    linkRowClass?: string;
}

declare type NonceDto = {
    nonce: string;
};

declare interface Props {
    authCallbackUrl: string;
    baseUrl: string;
    children?: React.ReactNode;
    tenantId?: string;
    walletConnectId?: string;
    appName?: string;
    appDescription?: string;
    appUrl?: string;
    appIcon?: string;
    subscriptionKey?: string;
}

export declare const useBedrockPassport: () => BedrockPassportIdInterface;

export declare const useBedrockToken: () => {
    login: (accessToken: string, refreshToken: string) => Promise<void>;
    accessToken: () => string | undefined;
    refreshToken: () => string | undefined;
    setAccessToken: (accessToken: string) => void;
    setRefreshToken: (refreshToken: string) => void;
    logout: () => void;
};

export declare type User = {
    id: string;
    email: string;
    name: string;
    playfabId: string;
    playfabSessionTicket: string;
    photoUrl: string;
    ethAddress: string;
    waxAddress: string;
    lastLogin: Date;
    newsletter: boolean;
    creatorConsent: boolean;
    userConsent: boolean;
    role: UserRole;
    createdAt: Date;
    updatedAt: Date;
    avaturnId: string;
    emailVerified: boolean;
    provider: UserProvider;
};

export declare type UserLoginDto = {
    user: {
        id: string;
    };
    token: {
        accessToken: string;
        refreshToken: string;
    };
};

export declare enum UserProvider {
    APPLE = "APPLE",
    EMAIL = "EMAIL",
    GOOGLE = "GOOGLE",
    FACEBOOK = "FACEBOOK"
}

export declare enum UserRole {
    ADMIN = 0,
    USER = 1
}

export declare type Widget = {
    text: string;
    url: string;
};

export { }
