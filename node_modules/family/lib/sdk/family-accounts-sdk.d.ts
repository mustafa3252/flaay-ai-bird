import { NetworkOnChangeData, Session, WalletData } from '@pocket-wallet/web-elements-bindings';
import { ConnectConfig } from './connection';
export declare enum SdkStatus {
    DISCONNECTED = 0,
    CONNECTING = 1,
    CONNECTED = 2
}
export declare enum SessionCreateResult {
    /**
     * User successfully authenticated
     */
    SUCCESS = "SUCCESS",
    /**
     * User cancelled popup by closing it or by timeout
     */
    USER_CANCELLED = "USER_CANCELLED",
    /**
     * Popup was blocked by the browser
     */
    BROWSER_BLOCKED = "BROWSER_BLOCKED"
}
export type SessionCreateResponse = {
    status: SessionCreateResult.SUCCESS;
    deviceId: string;
    clientSessionKey: string;
    wallet: WalletData;
    idToken: string;
} | {
    status: SessionCreateResult.USER_CANCELLED | SessionCreateResult.BROWSER_BLOCKED;
};
interface IFamilyAccountsSdk {
    connect: (config?: ConnectConfig) => Promise<void>;
    isConnected: () => boolean;
    isConnecting: () => boolean;
    disconnect: () => Promise<void>;
    onConnectionChange: (callback: (isConnected: boolean) => void) => () => void;
    session: {
        create: () => Promise<SessionCreateResponse>;
        init: () => Promise<Session>;
        getCurrent: () => Promise<Session>;
        clear: () => Promise<void>;
        onChange: (callback: (newValue: Session) => void) => () => void;
    };
    ethereum: {
        onNetworkChange: (callback: (newValue: NetworkOnChangeData) => void) => () => void;
    };
}
export declare const FamilyAccountsSdk: IFamilyAccountsSdk;
export type FamilyAccountsSdk = typeof FamilyAccountsSdk;
export {};
