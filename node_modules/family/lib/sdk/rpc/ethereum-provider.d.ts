import { RequestArguments } from './types';
import { ConnectConfig } from '../connection';
export type EthereumProviderOptions = {
    debug?: boolean;
    options?: ConnectConfig;
};
export declare class EthereumProviderConnectionTimeoutError extends Error {
    constructor();
}
/**
 * This follows the EIP - https://eips.ethereum.org/EIPS/eip-1193
 */
export declare class EthereumProvider {
    private _eventEmitter;
    private _accountsChangedUnsubscriptionCallback;
    private _networkChangedUnsubscriptionCallback;
    private _connectUnsubscriptionCallback;
    private _disconnectUnsubscriptionCallback;
    private _config?;
    constructor(options?: EthereumProviderOptions);
    private log;
    /**
     * @returns true if the provider is connected and ready to process requests
     */
    isConnected(): boolean;
    /**
     * JSONRPC request
     * @param args The request arguments
     */
    request(args: RequestArguments): Promise<any>;
    /**
     * JSONRPC request
     * @param method The request jsonrpc method
     * @param params The request parameters
     * @deprecated Please use `request` instead.
     */
    send(method: string, params?: unknown[] | object): Promise<unknown>;
    /**
     * The provider event emitters
     * @param eventName The event name
     * @param listener The listener to callback
     */
    on(eventName: 'message', listener: (messageInfo: {
        type: string;
        data: unknown;
    }) => void): this;
    on(eventName: 'connect', listener: (connectInfo: {
        chainId: string;
    }) => void): this;
    on(eventName: 'disconnect', listener: () => void): this;
    on(eventName: 'chainChanged', listener: (chainId: string) => void): this;
    on(eventName: 'accountsChanged', listener: (accounts: string[]) => void): this;
    /**
     * Remove the provider event emitters
     * @param eventName The event name
     * @param listener The listener to callback
     */
    removeListener(eventName: 'message' | 'connect' | 'disconnect' | 'chainChanged' | 'accountsChanged', listener: (...params: any[]) => void): this;
    private subscribeToNetworkChangeEvent;
    private unsubscribeFromNetworkChangeEvent;
    private subscribeToAccountChangeEvent;
    private unsubscribeFromAccountChangeEvent;
    private subscribeToConnectEvent;
    private unsubscribeFromConnectEvent;
    private subscribeToDisconnectEvent;
    private unsubscribeFromDisconnectEvent;
    /**
     * Wait for the provider to be connected
     * This is done to make provider compatible with `wagmi` `injected` connector that tries to attach events before the provider is connected
     */
    private waitForConnection;
}
