import { jsx, jsxs } from 'react/jsx-runtime';
import { F as FamilyAccountsSdk, S as SessionStatus, c as createFamilyAccountsClient, i as invariant, e as familyAccountsConnector } from './family-accounts-connector-DNek4H7L.js';
import { useConnect } from 'wagmi';
import { createContext, useState, useRef, useEffect, useContext } from 'react';
import 'events';
import 'viem';

const FamilyAccountsProviderContext = createContext(null);
const FamilyAccountsProvider = ({ children, config }) => {
    const [state, setState] = useState({
        isInitialized: false,
    });
    const connectCalledRef = useRef(false);
    useEffect(() => {
        let unsubscribeSession;
        const updateSession = async (currentSession) => {
            switch (currentSession.status) {
                case SessionStatus.NOT_AUTHENTICATED:
                    setState({
                        isInitialized: true,
                        client: null,
                    });
                    break;
                case SessionStatus.AUTHENTICATED:
                    {
                        setState({
                            isInitialized: true,
                            client: await createFamilyAccountsClient(),
                        });
                    }
                    break;
            }
        };
        const onChange = async (connected) => {
            if (connected) {
                const currentSession = await FamilyAccountsSdk.session.getCurrent();
                await updateSession(currentSession);
                unsubscribeSession = FamilyAccountsSdk.session.onChange(updateSession);
            }
            else {
                unsubscribeSession?.();
                setState({ isInitialized: false });
            }
        };
        const unsubsribeConnection = FamilyAccountsSdk.onConnectionChange(onChange);
        return () => {
            unsubsribeConnection();
        };
    }, []);
    useEffect(() => {
        if (connectCalledRef.current) {
            // Already connected, done to prevent multiple calls to connect in StrictMode
            return;
        }
        connectCalledRef.current = true;
        const connect = async () => {
            await FamilyAccountsSdk.connect(config);
        };
        connect()
            // make sure to catch any error
            // eslint-disable-next-line no-console
            .catch(console.error);
    }, []);
    return (jsx(FamilyAccountsProviderContext.Provider, { value: state, children: children }));
};
const useFamilyAccounts = () => {
    const value = useContext(FamilyAccountsProviderContext);
    if (!value) {
        throw new Error('`FamilyAccountsProvider` not found in the component tree. Make sure to wrap your app with it.');
    }
    return value;
};
const useFamilyAccountsClient = () => {
    const fa = useFamilyAccounts();
    if (!fa.isInitialized) {
        throw new Error('Family accounts sdk is not initialized. Make sure to check `isInitialized` flag before accessing the client.');
    }
    return fa.client;
};

const LoadingIndicator = (_) => {
    return jsx("div", { style: { height: '56px' } });
};
const AuthenticatedButton = () => {
    const client = useFamilyAccountsClient();
    invariant(client, 'Client should be authenticated');
    return jsxs("p", { children: [" Connected: ", client.account.address] });
};
const NotAuthenticatedButton = () => {
    const { connect } = useConnect();
    return (jsx("button", { onClick: () => connect({
            connector: familyAccountsConnector(),
        }), style: { height: '56px' }, children: "Connect with Family Accounts" }));
};
const ConnectButton = (_) => {
    const pocket = useFamilyAccounts();
    if (!pocket.isInitialized) {
        return jsx(LoadingIndicator, {});
    }
    if (!pocket.client) {
        return jsx(NotAuthenticatedButton, {});
    }
    return jsx(AuthenticatedButton, {});
};

export { ConnectButton, FamilyAccountsProvider, useFamilyAccounts, useFamilyAccountsClient };
